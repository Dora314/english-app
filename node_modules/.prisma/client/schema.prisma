// frontend/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
  // Output to the default location expected by many tools and for easier type inference
  output   = "../../node_modules/.prisma/client"
}

/**
 * generator client_py {
 * provider = "prisma-client-py"
 * // output = "../backend/generated/prisma" // Optional: custom output dir for python client
 * // interface = "asyncio" // Default, can be trio
 * // recursive_type_depth = 5 // Default
 * }
 */

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?   @map("avatar_url") // Using 'image' as NextAuth expects, maps to avatar_url
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  googleId String? @unique @map("google_id") // Your custom field for Google ID

  accounts Account[]
  sessions Session[]

  // New relations for MCQ progress
  userAnswers         UserAnswer[]
  wrongdoingQuestions UserWrongdoingQuestion[]
  dashboard           UserDashboardData? // Add this relation
}

// --- User Dashboard Data Model ---
model UserDashboardData {
  userId                String @id @map("user_id") // PK and FK to User
  totalPoints           Int    @default(0) @map("total_points")
  previousSessionPoints Int    @default(0) @map("previous_session_points")
  // Example for pointsHistory: [{timestamp: "ISOString", points: 10, quizSessionId: "some_id"}]
  // Using String for simplicity now, Prisma will store as JSON text.
  // For typed JSON, Prisma supports it, but requires defining the type.
  pointsHistory         String @default("[]") @map("points_history") @db.Text // Store as JSON string

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_dashboard_data")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// New Models for MCQs & User Progress ---
model Question {
  id              String   @id @default(cuid())
  questionText    String   @map("question_text")
  options         Json // Store options as JSON: [{id: "A", text: "..."}, ...]
  correctAnswerId String   @map("correct_answer_id") // ID of the correct option, e.g., "A"
  topicId         String?  @map("topic_id") // Optional: Link to a Topic model
  // topic            Topic?    @relation(fields: [topicId], references: [id])
  difficultyLevel String?  @map("difficulty_level")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  userAnswers         UserAnswer[]
  wrongdoingQuestions UserWrongdoingQuestion[]

  @@map("questions") // Table name in DB
}

model UserAnswer {
  id               String   @id @default(cuid())
  userId           String   @map("user_id")
  questionId       String   @map("question_id")
  selectedOptionId String   @map("selected_option_id") // The ID of the option the user selected (e.g., "A")
  // selectedAnswerText String @map("selected_answer_text") // Could store text too
  isCorrect        Boolean  @map("is_correct")
  timestamp        DateTime @default(now())
  quizSessionId    String?  @map("quiz_session_id") // Optional: to group answers from one MCQ play session

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([questionId])
  @@map("user_answers")
}

model UserWrongdoingQuestion {
  id                   String   @id @default(cuid())
  userId               String   @map("user_id")
  questionId           String   @map("question_id")
  timestampMarkedWrong DateTime @default(now()) @map("timestamp_marked_wrong")
  retestedCorrectly    Boolean  @default(false) @map("retested_correctly")

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([userId, questionId]) // A user can only have one entry for a specific wrong question (latest instance)
  // Or remove unique if you want to track multiple wrong attempts over time for same Q
  @@index([userId])
  @@map("user_wrongdoing_questions")
}
